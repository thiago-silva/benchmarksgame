
Sat, 31 May 2014 05:07:40 GMT

MAKE:
cp: ‘knucleotide.sbcl-5.sbcl’ and ‘./knucleotide.sbcl-5.sbcl’ are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "knucleotide.sbcl-5.sbcl_compile")'
### START knucleotide.sbcl-5.sbcl_compile
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "knucleotide.sbcl-5.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END knucleotide.sbcl-5.sbcl_compile

; compiling file "/home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl" (written 24 JAN 2013 02:01:15 PM):
; compiling (DEFPACKAGE #:K-NUCLEOTIDE ...)
; compiling (IN-PACKAGE :K-NUCLEOTIDE)
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DEFMACRO WITH-PACKED-SEQUENCES ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFMACRO WITH-PACKED-SEQUENCES
;     (1- (EXPT 4 LENGTH))
; ==>
;   (- (EXPT 4 LENGTH) 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (1- LENGTH)
; ==>
;   (- LENGTH 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (* (1- LENGTH) 2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a SINGLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a NUMBER, not a INTEGER.
; 
; note: unable to
;   associate */* of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   associate *// of constants
; due to type uncertainty:
;   The first argument is a NUMBER, not a RATIONAL.
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a (UNSIGNED-BYTE 32).
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 32)
;                                                            &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a NUMBER, not a FIXNUM.
;   The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).

;     (1- (* (1- LENGTH) 2))
; ==>
;   (- (* (1- LENGTH) 2) 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (1- (EXPT 4 LENGTH))
; ==>
;   (- (EXPT 4 LENGTH) 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (1- LENGTH)
; ==>
;   (- LENGTH 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (* (1- LENGTH) 2)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 4) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (1- (* (1- LENGTH) 2))
; ==>
;   (- (* (1- LENGTH) 2) 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFMACRO PACK-SEQUENCE ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFMACRO PACK-SEQUENCE
;     (LENGTH SEQUENCE)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

; compiling (DEFUN UNPACK-SEQUENCE ...)
; compiling (DEFMACRO WITH-PACKED-CACHES-FILL ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFMACRO WITH-PACKED-CACHES-FILL
;     (>= K-NUCLEOTIDE::TICK LENGTH)
; --> OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

;     (LOOP :FOR K-NUCLEOTIDE::TICK :FROM 1 :TO (APPLY #'MAX
;                                                      (MAPCAR #'THIRD
;                                                              K-NUCLEOTIDE::UPDATERS))
;           :COLLECT `(K-NUCLEOTIDE::WITH-CURRENT-CHAR (CHAR :SKIP-NEWLINE T)
;                      ,@(LOOP :FOR (K-NUCLEOTIDE::BIND K-NUCLEOTIDE::UPDATE
;                                    LENGTH) :IN K-NUCLEOTIDE::UPDATERS
;                              :COLLECT `(,K-NUCLEOTIDE::UPDATE CHAR)
;                              :WHEN (>= K-NUCLEOTIDE::TICK LENGTH)
;                              :COLLECT `(,K-NUCLEOTIDE::HASH-ACCESS ,LENGTH
;                                         ,K-NUCLEOTIDE::BIND))))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF 
; ==>
;   (> K-NUCLEOTIDE::TICK #:LOOP-LIMIT-105)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

;     (>= K-NUCLEOTIDE::TICK LENGTH)
; --> OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

;     (LOOP :FOR K-NUCLEOTIDE::TICK :FROM 1 :TO (APPLY #'MAX
;                                                      (MAPCAR #'THIRD
;                                                              K-NUCLEOTIDE::UPDATERS))
;           :COLLECT `(K-NUCLEOTIDE::WITH-CURRENT-CHAR (CHAR :SKIP-NEWLINE T)
;                      ,@(LOOP :FOR (K-NUCLEOTIDE::BIND K-NUCLEOTIDE::UPDATE
;                                    LENGTH) :IN K-NUCLEOTIDE::UPDATERS
;                              :COLLECT `(,K-NUCLEOTIDE::UPDATE CHAR)
;                              :WHEN (>= K-NUCLEOTIDE::TICK LENGTH)
;                              :COLLECT `(,K-NUCLEOTIDE::HASH-ACCESS ,LENGTH
;                                         ,K-NUCLEOTIDE::BIND))))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 1+ 
; ==>
;   (+ K-NUCLEOTIDE::TICK 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (INTEGER 1), not a FIXNUM.
;       The result is a (VALUES (INTEGER 2) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

; compiling (DEFMACRO WITH-READING-STREAM ...)
; compiling (DEFMACRO SKIP-BUFFER-TO ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFMACRO SKIP-BUFFER-TO
;     (LOOP :FOR CHAR :ACROSS (STRING K-NUCLEOTIDE::PATTERN)
;           :COLLECT `(K-NUCLEOTIDE::WITH-CURRENT-CHAR (CHAR) (CHAR= CHAR ,CHAR)))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE AREF 
; ==>
;   (SB-KERNEL:HAIRY-DATA-VECTOR-REF ARRAY SB-INT:INDEX)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a STRING, not a SIMPLE-STRING.
; 
; note: unable to
;   avoid runtime dispatch on array element type
; due to type uncertainty:
;   The first argument is a STRING, not a SIMPLE-ARRAY.

; compiling (DEFMACRO WITH-DNA-ANALYZED ...)
; compiling (DEFUN SEQ= ...)
; compiling (DEFUN SEQ-HASH ...)
; compiling (SB-EXT:DEFINE-HASH-TABLE-TEST SEQ= ...)
; compiling (DEFMACRO WITH-SMART-DNA-HASH ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFMACRO WITH-SMART-DNA-HASH
;     (< K-NUCLEOTIDE::AREA MOST-POSITIVE-FIXNUM)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.

;     (1- LENGTH)
; ==>
;   (- LENGTH 1)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX SINGLE-FLOAT).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a NUMBER, not a (COMPLEX DOUBLE-FLOAT).

;     (<= K-NUCLEOTIDE::AREA K-NUCLEOTIDE::VECTOR-THRESHOLD)
; --> OR LET < IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

; --> OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.
; 
; note: unable to open code because: The operands might not be the same type.

; --> OR LET < IF 
; ==>
;   (< SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       etc.

; --> OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-= (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.

;     (< K-NUCLEOTIDE::AREA MOST-POSITIVE-FIXNUM)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a REAL, not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a REAL, not a FIXNUM.
;       etc.

;     (1- LENGTH)
; ==>
;   (- LENGTH 1)
; 
; note: forced to do GENERIC-- (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a NUMBER, not a FIXNUM.
;       The result is a (VALUES NUMBER &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

; compiling (DEFMACRO WITH-PERCENTAGE ...)
; compiling (DEFMACRO OBTAIN-SEQ-COUNT ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFMACRO OBTAIN-SEQ-COUNT
;     (LENGTH K-NUCLEOTIDE::SEQ)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a (SIMPLE-ARRAY * (*)).
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a SEQUENCE, not a VECTOR.

; compiling (DEFUN PERFORM-WORK ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFUN PERFORM-WORK
;     (K-NUCLEOTIDE::WITH-DNA-ANALYZED
;      (STREAM K-NUCLEOTIDE::INCF-HASH-ELEMENT :BLOCK-SIZE 655350) 1 2 3 4 6 12 18)
; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET 
; --> K-NUCLEOTIDE::WITH-PACKED-CACHES-FILL PROGN 
; --> K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET LOOP BLOCK 
; --> TAGBODY PROGN K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; --> LOGIOR 
; ==>
;   (ASH #:G530 -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET MACROLET 
; --> K-NUCLEOTIDE::WITH-READING-STREAM BLOCK LET FLET MACROLET LOOP BLOCK 
; --> TAGBODY PROGN K-NUCLEOTIDE::WITH-CURRENT-CHAR LET #:G531 SETF SETQ THE 
; ==>
;   (LOGIOR (ASH #:G530 -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

;     (K-NUCLEOTIDE::OBTAIN-SEQ-COUNT K-NUCLEOTIDE::HASH-ACCESS
;                                     "GGTATTTTAATTTATAGT")
; --> LIST K-NUCLEOTIDE::HASH-ACCESS THE GETHASH SB-IMPL::GETHASH3 
; --> K-NUCLEOTIDE::PACK-SEQUENCE K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET 
; --> MACROLET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY K-NUCLEOTIDE::UPDATE 
; --> SETF SETQ THE LOGIOR 
; ==>
;   (ASH K-NUCLEOTIDE::BIND -2)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline ASH (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 36), not a (UNSIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 34) &OPTIONAL), not a (VALUES
;                                                                     (UNSIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; ==>
;   (ASH (LOGAND (CHAR-CODE CHAR) 6) 33)
; 
; note: forced to do full call
;       unable to do inline ASH (cost 2) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    FIXNUM &REST
;                                                                    T).
;       unable to do inline ASH (cost 3) because:
;       The result is a (VALUES (MOD 51539607553) &OPTIONAL), not a (VALUES
;                                                                    (UNSIGNED-BYTE
;                                                                     32)
;                                                                    &REST T).
;       etc.

; --> LIST K-NUCLEOTIDE::HASH-ACCESS THE GETHASH SB-IMPL::GETHASH3 
; --> K-NUCLEOTIDE::PACK-SEQUENCE K-NUCLEOTIDE::WITH-PACKED-SEQUENCES LET 
; --> MACROLET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY K-NUCLEOTIDE::UPDATE 
; --> SETF SETQ THE 
; ==>
;   (LOGIOR (ASH K-NUCLEOTIDE::BIND -2) (ASH (LOGAND (CHAR-CODE CHAR) 6) 33))
; 
; note: forced to do static-fun Two-arg-ior (cost 53)
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a FIXNUM.
;       The second argument is a (MOD 51539607553), not a FIXNUM.
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     FIXNUM
;                                                                     &REST T).
;       unable to do inline (signed-byte 32) arithmetic (cost 3) because:
;       The first argument is a (UNSIGNED-BYTE 34), not a (SIGNED-BYTE 32).
;       The second argument is a (MOD 51539607553), not a (SIGNED-BYTE 32).
;       The result is a (VALUES (UNSIGNED-BYTE 36) &OPTIONAL), not a (VALUES
;                                                                     (SIGNED-BYTE
;                                                                      32)
;                                                                     &REST T).
;       etc.

; compiling (DEFUN PRINT-RESULTS ...)
; file: /home/dunham/benchmarksgame/bench/knucleotide/knucleotide.sbcl-5.sbcl
; in: DEFUN PRINT-RESULTS
;     (> (SECOND K-NUCLEOTIDE::A) (SECOND K-NUCLEOTIDE::B))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

;     (< (SECOND K-NUCLEOTIDE::A) (SECOND K-NUCLEOTIDE::B))
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a SINGLE-FLOAT.
;   The second argument is a REAL, not a DOUBLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a REAL, not a DOUBLE-FLOAT.
;   The second argument is a REAL, not a SINGLE-FLOAT.
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a REAL, not a FLOAT.
;   The second argument is a REAL, not a RATIONAL.

;     (STRING< (FIRST K-NUCLEOTIDE::A) (FIRST K-NUCLEOTIDE::B))
; ==>
;   (SB-KERNEL:STRING<* SB-C::STRING1 SB-C::STRING2 SB-C::START1 SB-C::END1
;                       SB-C::START2 SB-C::END2)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (VECTOR CHARACTER) (VECTOR NIL) BASE-STRING
;                               SYMBOL CHARACTER), not a SIMPLE-BASE-STRING.
;   The second argument is a (OR (VECTOR CHARACTER) (VECTOR NIL) BASE-STRING
;                                SYMBOL CHARACTER), not a SIMPLE-BASE-STRING.

;     (> (SECOND K-NUCLEOTIDE::A) (SECOND K-NUCLEOTIDE::B))
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       etc.

;     (< (SECOND K-NUCLEOTIDE::A) (SECOND K-NUCLEOTIDE::B))
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a DOUBLE-FLOAT.
;       The second argument is a REAL, not a DOUBLE-FLOAT.
;       unable to do inline float comparison (cost 3) because:
;       The first argument is a REAL, not a SINGLE-FLOAT.
;       The second argument is a REAL, not a SINGLE-FLOAT.
;       etc.

; compiling (DEFUN MAIN ...)
; compiling (IN-PACKAGE :CL-USER)
; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 115 notes


; /home/dunham/benchmarksgame_onecore/knucleotide/tmp/knucleotide.sbcl-5.fasl written
; compilation finished in 0:00:00.865
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 3528 bytes from the read-only space at 0x0x1000000
writing 2240 bytes from the static space at 0x0x1100000
writing 30281728 bytes from the dynamic space at 0x0x9000000
done]
### START knucleotide.sbcl-5.sbcl_run
(main) (quit)
### END knucleotide.sbcl-5.sbcl_run

1.57s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl   --noinform --core sbcl.core --userinit /dev/null --load knucleotide.sbcl-5.sbcl_run 0 < knucleotide-input25000000.txt

PROGRAM OUTPUT:
A 30.295
T 30.151
C 19.800
G 19.754

AA 9.177
TA 9.132
AT 9.131
TT 9.091
CA 6.002
AC 6.001
AG 5.987
GA 5.984
CT 5.971
TC 5.971
GT 5.957
TG 5.956
CC 3.917
GC 3.911
CG 3.909
GG 3.902

1471758	GGT
446535	GGTA
47336	GGTATT
893	GGTATTTTAATT
893	GGTATTTTAATTTATAGT
