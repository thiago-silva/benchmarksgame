
Mon, 08 Oct 2012 21:15:10 GMT

MAKE:
cp: `fasta.sbcl-5.sbcl' and `./fasta.sbcl-5.sbcl' are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "fasta.sbcl-5.sbcl_compile")'
### START fasta.sbcl-5.sbcl_compile
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "fasta.sbcl-5.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END fasta.sbcl-5.sbcl_compile


; compiling file "/home/dunham/shootout/bench/fasta/fasta.sbcl-5.sbcl" (written 13 APR 2011 03:09:23 PM):
; compiling (DEFMACRO DEFINE-CONSTANT ...)
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DEFCONSTANT LINE-LENGTH ...)
; compiling (DEFCONSTANT OUT-BUFFER-SIZE ...)
; compiling (DEFCONSTANT LOOKUP-SIZE ...)
; compiling (DEFCONSTANT LOOKUP-SCALE ...)
; compiling (DEFCONSTANT LIM ...)
; compiling (DEFTYPE CBYTE ...)
; compiling (DEFMACRO CBYTE ...)
; compiling (DEFSTRUCT FREQ ...)
; compiling (DEFMACRO FREQUIFY ...)
; compiling (DEFUN FREQUIFY-FN ...)
; compiling (DEFUN SUM-AND-SCALE ...)
; compiling (DEFUN RANDOM-FASTA-MAKE-LOOKUP ...)
; compiling (DEFMACRO FX ...)
; compiling (DEFCONSTANT IM ...)
; compiling (DEFCONSTANT IA ...)
; compiling (DEFCONSTANT IC ...)
; compiling (DEFCONSTANT SCALE ...)
; compiling (DEFINE-CONSTANT RAND-ARRAY ...)
; file: /home/dunham/shootout/bench/fasta/fasta.sbcl-5.sbcl
; in: DEFINE-CONSTANT RAND-ARRAY
;     (* LAST IA)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0 0.0d0) (RATIONAL (-139968) (279936))
;                               (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                               (SINGLE-FLOAT -139968.0 279936.0)), not a FLOAT.
; 
; note: unable to
;   convert x*2^k to shift
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0 0.0d0) (RATIONAL (-139968) (279936))
;                               (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                               (SINGLE-FLOAT -139968.0 279936.0)), not a INTEGER.
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0 0.0d0) (RATIONAL (-139968) (279936))
;                               (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                               (SINGLE-FLOAT -139968.0
;                                279936.0)), not a (UNSIGNED-BYTE 64).
;   The result is a (VALUES
;                    (OR (MEMBER 0.0 0.0d0)
;                        (SINGLE-FLOAT -5.4265594e8 1.0853119e9)
;                        (DOUBLE-FLOAT -5.42655936d8 1.085311872d9)
;                        (RATIONAL (-542655936) (1085311872)))
;                    &OPTIONAL), not a (VALUES (UNSIGNED-BYTE 64) &REST T).
; 
; note: unable to
;   recode as leas, shifts and adds
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0 0.0d0) (RATIONAL (-139968) (279936))
;                               (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                               (SINGLE-FLOAT -139968.0 279936.0)), not a FIXNUM.
;   The result is a (VALUES
;                    (OR (MEMBER 0.0 0.0d0)
;                        (SINGLE-FLOAT -5.4265594e8 1.0853119e9)
;                        (DOUBLE-FLOAT -5.42655936d8 1.085311872d9)
;                        (RATIONAL (-542655936) (1085311872)))
;                    &OPTIONAL), not a (VALUES FIXNUM &REST T).

;     (+ (* LAST IA) IC)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0 0.0d0)
;                               (SINGLE-FLOAT -5.4265594e8 1.0853119e9)
;                               (DOUBLE-FLOAT -5.42655936d8 1.085311872d9)
;                               (RATIONAL (-542655936)
;                                         (1085311872))), not a FLOAT.

;     (* SCALE (SETF LAST (MOD (+ # IC) IM)))
; ==>
;   (* SB-C::Y 0.029256687242798354d0)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0 0.0d0) (RATIONAL (-139968) (279936))
;                               (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                               (SINGLE-FLOAT -139968.0
;                                279936.0)), not a RATIONAL.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (MEMBER 0.0 0.0d0) (RATIONAL (-139968) (279936))
;                               (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                               (SINGLE-FLOAT -139968.0
;                                279936.0)), not a SINGLE-FLOAT.

;     (MOD (+ (* LAST IA) IC) IM)
; --> BLOCK LET IF AND IF NOT IF ZEROP 
; ==>
;   (= REM 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a (OR (RATIONAL (-139968) (139968))
;                               (DOUBLE-FLOAT -139968.0d0 139968.0d0)
;                               (SINGLE-FLOAT -139968.0 139968.0)), not a FLOAT.
; 
; note: unable to open code because: The operands might not be the same type.

; --> BLOCK LET IF AND IF AND THE IF MINUSP 
; ==>
;   (< NUMBER 0)
; 
; note: unable to
;   open-code FLOAT to RATIONAL comparison
; due to type uncertainty:
;   The first argument is a (OR (RATIONAL (-542626363) (1085341445))
;                               (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                               (SINGLE-FLOAT -5.4262637e8
;                                1.0853414e9)), not a FLOAT.

; --> BLOCK LET IF 
; ==>
;   (+ REM SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (RATIONAL (-139968) (139968))
;                               (DOUBLE-FLOAT -139968.0d0 139968.0d0)
;                               (SINGLE-FLOAT -139968.0 139968.0)), not a FLOAT.

; --> BLOCK LET REM BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   (TRUNCATE NUMBER SB-KERNEL::DIVISOR)
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (RATIONAL (-542626363) (1085341445))
;                               (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                               (SINGLE-FLOAT -5.4262637e8
;                                1.0853414e9)), not a SINGLE-FLOAT.
; 
; note: unable to
;   optimize
; due to type uncertainty:
;   The first argument is a (OR (RATIONAL (-542626363) (1085341445))
;                               (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                               (SINGLE-FLOAT -5.4262637e8
;                                1.0853414e9)), not a DOUBLE-FLOAT.
; 
; note: unable to
;   convert division by 2^k to shift
; due to type uncertainty:
;   The first argument is a (OR (RATIONAL (-542626363) (1085341445))
;                               (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                               (SINGLE-FLOAT -5.4262637e8
;                                1.0853414e9)), not a INTEGER.
; 
; note: unable to
;   convert integer division to multiplication
; due to type uncertainty:
;   The first argument is a (OR (RATIONAL (-542626363) (1085341445))
;                               (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                               (SINGLE-FLOAT -5.4262637e8
;                                1.0853414e9)), not a (UNSIGNED-BYTE 64).

;     (* LAST IA)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline fixnum arithmetic (cost 3) because:
;       The first argument is a (OR (MEMBER 0.0 0.0d0)
;                                   (RATIONAL (-139968) (279936))
;                                   (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                                   (SINGLE-FLOAT -139968.0 279936.0)), not a FIXNUM.
;       The result is a (VALUES
;                        (OR (MEMBER 0.0 0.0d0)
;                            (SINGLE-FLOAT -5.4265594e8 1.0853119e9)
;                            (DOUBLE-FLOAT -5.42655936d8 1.085311872d9)
;                            (RATIONAL (-542655936) (1085311872)))
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline (signed-byte 64) arithmetic (cost 4) because:
;       The first argument is a (OR (MEMBER 0.0 0.0d0)
;                                   (RATIONAL (-139968) (279936))
;                                   (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                                   (SINGLE-FLOAT -139968.0 279936.0)), not a (SIGNED-BYTE
;                                                                              64).
;       The result is a (VALUES
;                        (OR (MEMBER 0.0 0.0d0)
;                            (SINGLE-FLOAT -5.4265594e8 1.0853119e9)
;                            (DOUBLE-FLOAT -5.42655936d8 1.085311872d9)
;                            (RATIONAL (-542655936) (1085311872)))
;                        &OPTIONAL), not a (VALUES (SIGNED-BYTE 64) &REST T).
;       etc.

;     (+ (* LAST IA) IC)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (OR (MEMBER 0.0 0.0d0)
;                                   (SINGLE-FLOAT -5.4265594e8 1.0853119e9)
;                                   (DOUBLE-FLOAT -5.42655936d8 1.085311872d9)
;                                   (RATIONAL (-542655936) (1085311872))), not a FIXNUM.
;       The result is a (VALUES
;                        (OR (RATIONAL (-542626363) (1085341445))
;                            (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                            (SINGLE-FLOAT -5.4262637e8 1.0853414e9))
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (OR (MEMBER 0.0 0.0d0)
;                                   (SINGLE-FLOAT -5.4265594e8 1.0853119e9)
;                                   (DOUBLE-FLOAT -5.42655936d8 1.085311872d9)
;                                   (RATIONAL (-542655936) (1085311872))), not a FIXNUM.
;       The result is a (VALUES
;                        (OR (RATIONAL (-542626363) (1085341445))
;                            (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                            (SINGLE-FLOAT -5.4262637e8 1.0853414e9))
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (MOD (+ (* LAST IA) IC) IM)
; --> BLOCK LET IF AND IF AND THE IF MINUSP 
; ==>
;   (< NUMBER 0)
; 
; note: forced to do GENERIC-< (cost 10)
;       unable to do inline fixnum comparison (cost 3) because:
;       The first argument is a (OR (RATIONAL (-542626363) (1085341445))
;                                   (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                                   (SINGLE-FLOAT -5.4262637e8 1.0853414e9)), not a FIXNUM.
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a (OR (RATIONAL (-542626363) (1085341445))
;                                   (DOUBLE-FLOAT -5.42626363d8 1.085341445d9)
;                                   (SINGLE-FLOAT -5.4262637e8 1.0853414e9)), not a FIXNUM.
;       etc.

; --> BLOCK LET IF 
; ==>
;   (+ REM SB-KERNEL::DIVISOR)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a (OR (RATIONAL (-139968) (139968))
;                                   (DOUBLE-FLOAT -139968.0d0 139968.0d0)
;                                   (SINGLE-FLOAT -139968.0 139968.0)), not a FIXNUM.
;       The result is a (VALUES
;                        (OR (MEMBER 0.0 0.0d0) (DOUBLE-FLOAT (0.0d0) 279936.0d0)
;                            (SINGLE-FLOAT (0.0) 279936.0)
;                            (RATIONAL (0) (279936)))
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a (OR (RATIONAL (-139968) (139968))
;                                   (DOUBLE-FLOAT -139968.0d0 139968.0d0)
;                                   (SINGLE-FLOAT -139968.0 139968.0)), not a FIXNUM.
;       The result is a (VALUES
;                        (OR (MEMBER 0.0 0.0d0) (DOUBLE-FLOAT (0.0d0) 279936.0d0)
;                            (SINGLE-FLOAT (0.0) 279936.0)
;                            (RATIONAL (0) (279936)))
;                        &OPTIONAL), not a (VALUES FIXNUM &REST T).
;       etc.

;     (* SCALE (SETF LAST (MOD (+ # IC) IM)))
; ==>
;   (* SB-C::Y 0.029256687242798354d0)
; 
; note: forced to do GENERIC-* (cost 30)
;       unable to do inline float arithmetic (cost 5) because:
;       The first argument is a (OR (MEMBER 0.0 0.0d0)
;                                   (RATIONAL (-139968) (279936))
;                                   (DOUBLE-FLOAT -139968.0d0 279936.0d0)
;                                   (SINGLE-FLOAT -139968.0 279936.0)), not a DOUBLE-FLOAT.

; compiling (DEFINE-CONSTANT AI-ARRAY ...)
; file: /home/dunham/shootout/bench/fasta/fasta.sbcl-5.sbcl
; in: DEFINE-CONSTANT AI-ARRAY
;     (TRUNCATE (AREF RAND-ARRAY I))
; --> TRUNCATE LET 
; ==>
;   (SB-KERNEL:%UNARY-TRUNCATE/DOUBLE-FLOAT SB-C::X)
; 
; note: forced to do full call
;       unable to do inline float truncate (cost 5) because:
;       The result is a (VALUES INTEGER &OPTIONAL), not a (VALUES
;                                                          (SIGNED-BYTE 64) &REST
;                                                          T).

; --> TRUNCATE LET VALUES - 
; ==>
;   (SB-KERNEL:%DOUBLE-FLOAT SB-C::RES)
; 
; note: forced to do full call
;       unable to do inline float coercion (cost 5) because:
;       The first argument is a INTEGER, not a (SIGNED-BYTE 64).

; --> TRUNCATE LET 
; ==>
;   (SB-KERNEL:%UNARY-TRUNCATE/DOUBLE-FLOAT SB-C::X)
; 
; note: doing float to pointer coercion (cost 13)

; compiling (DEFPARAMETER *C* ...)
; compiling (DECLAIM (TYPE FIXNUM ...))
; compiling (DEFMACRO RANDOM-NEXT ...)
; compiling (DEFINE-CONSTANT ALU ...)
; compiling (DEFINE-CONSTANT IUB ...)
; compiling (DEFINE-CONSTANT HOMO-SAPIENS ...)
; compiling (DEFINE-CONSTANT OUT-BUF ...)
; compiling (LET (#) ...)
; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 23 notes


; /home/dunham/benchmarksgame/fasta/tmp/fasta.sbcl-5.fasl written
; compilation finished in 0:00:00.215
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 5952 bytes from the read-only space at 0x20000000
writing 4000 bytes from the static space at 0x20100000
writing 46006272 bytes from the dynamic space at 0x1000000000
done]
### START fasta.sbcl-5.sbcl_run
(main) (quit)
### END fasta.sbcl-5.sbcl_run

0.60s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl --dynamic-space-size 500 --noinform --core sbcl.core --userinit /dev/null --load fasta.sbcl-5.sbcl_run 25000000

(TRUNCATED) PROGRAM OUTPUT:
>ONE Homo sapiens alu
GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGA
TCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACT
AAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAG
GCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCG
CCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGT
GGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCA
GGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAA
TTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAG
AATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCA
GCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGT
AATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACC
AGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTG
GTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACC
CGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAG
AGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTT
TGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACA
TGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCT
GTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGG
TTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGT
CTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGG
CGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCG
TCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTA
CTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCG
AGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCG
GGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACC
TGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAA
TACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGA
GGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACT
GCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTC
ACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGT
TCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGC
CGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCG
CTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTG
GGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCC
CAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCT
GGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGC
GCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGA
GGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGA
GACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGA
GGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTG
AAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT
CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCA
GTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAA
AAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGC
GGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCT
ACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGG
GAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATC
GCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGC
GGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGG
TCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAA
AAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAG
GAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACT
CCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCC
TGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAG
ACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGC
GTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGA
ACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGA
CAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCA
CTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCA
ACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCG
CCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGG
AGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTC
CGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCG
AGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACC
CCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAG
CTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAG
CCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGG
CCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATC
ACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAA
AAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGC
TGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCC
ACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGG
CTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGG
AGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATT
AGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAA
TCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGC
CTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAA
TCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAG
CCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGT
GGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCG
GGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAG
CGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG
GGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATG
GTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGT
AATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTT
GCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCT
CAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCG
GGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTC
TCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACT
CGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAG
ATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGG
CGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTG
AGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATA
CAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGG
CAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGC
ACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCAC
GCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTC
GAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCG
GGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCT
TGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGG
CGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCA
GCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGG
CCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGC
GCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGG
CGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGA
CTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGG
CCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAA
ACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCC
CAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGT
GAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAA
AGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGG
ATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTAC
TAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGA
GGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGC
GCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGG
TGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTC
AGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAA
ATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGA
GAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC
AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTG
TAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGAC
CAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGT
GGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAAC
CCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACA
GAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACT
TTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAAC
ATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCC
TGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAG
GTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCG
TCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAG
GCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCC
GTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCT
ACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCC
GAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCC
GGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCAC
CTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAA
ATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTG
AGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCAC
TGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCT
CACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAG
TTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAG
CCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATC
GCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCT
GGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATC
CCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCC
TGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGG
CGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG
AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCG
AGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGG
AGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGT
GAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAA
TCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGC
AGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCA
AAAAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGG
CGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTC
TACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCG
GGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGAT
CGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCG
CGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAG
GTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACA
AAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCA
GGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCAC
TCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAGGCCGGGCGCGGTGGCTCACGC
CTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGA
GACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGG
CGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTG
AACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCG
ACAGAGCGAGACTCCGTCTCAAAAAGGCCGG