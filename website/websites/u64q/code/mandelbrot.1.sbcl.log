
Sun, 01 Jun 2014 01:03:51 GMT

MAKE:
cp: ‘mandelbrot.sbcl’ and ‘./mandelbrot.sbcl’ are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "mandelbrot.sbcl_compile")'
### START mandelbrot.sbcl_compile
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "mandelbrot.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END mandelbrot.sbcl_compile

; compiling file "/home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl" (written 23 JAN 2013 08:18:56 PM):
; compiling (SETF *EFFICIENCY-NOTE-COST-THRESHOLD* ...)
; compiling (SETF *EFFICIENCY-NOTE-LIMIT* ...)
; compiling (SETF *INLINE-EXPANSION-LIMIT* ...)
; compiling (SB-INT:SET-FLOATING-POINT-MODES :TRAPS ...)
; compiling (DEFPACKAGE :VOPS ...)
; compiling (IN-PACKAGE :SB-VM)
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (HANDLER-BIND (#) ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE)
;     (SB-VM::FROB :LE SB-VM::CMPPD SB-VM::CMPLE-MOVMSKPD 3)
; --> PROGN SB-C:DEFINE-VOP PROGN LET SB-C::MAKE-VOP-INFO LAMBDA FUNCTION LET* 
; --> SB-ASSEM:ASSEMBLE LET* MACROLET SYMBOL-MACROLET SB-VM::GENERATE 
; ==>
;   (FLET ((SB-VM::GET-CONSTANT (SB-C:TN)
;            (SB-C:REGISTER-INLINE-CONSTANT (SB-C:TN-VALUE SB-C:TN))))
;     (DECLARE (IGNORABLE (FUNCTION SB-VM::GET-CONSTANT)))
;     (COND
;      ((SB-C:LOCATION= SB-VM::X SB-VM::R)
;       (WHEN (SB-C:SC-IS SB-VM::Y SB-VM::FP-COMPLEX-DOUBLE-IMMEDIATE) (SETF #))
;       (SB-ASSEM:INST SB-VM::CMPPD :LE SB-VM::X SB-VM::Y)
;       (SB-ASSEM:INST SB-VM::MOVMSKPD SB-VM::R SB-VM::X))
;      ((NOT (SB-C:LOCATION= SB-VM::R SB-VM::Y))
;       (IF (SB-C:SC-IS SB-VM::X SB-VM::FP-COMPLEX-DOUBLE-IMMEDIATE)
;           (SB-ASSEM:INST SB-VM::MOVAPD SB-VM::R #)
;           (SB-C:MOVE SB-VM::TMP SB-VM::X))
;       (WHEN (SB-C:SC-IS SB-VM::Y SB-VM::FP-COMPLEX-DOUBLE-IMMEDIATE) (SETF #))
;       (SB-ASSEM:INST SB-VM::CMPPD :LE SB-VM::TMP SB-VM::Y)
;       (SB-ASSEM:INST SB-VM::MOVMSKPD SB-VM::R SB-VM::TMP))
;      (T
;       (IF (SB-C:SC-IS SB-VM::X SB-VM::FP-COMPLEX-DOUBLE-IMMEDIATE)
;           (SB-ASSEM:INST SB-VM::MOVAPD SB-VM::TMP #)
;           (SB-C:MOVE SB-VM::TMP SB-VM::X))
;       (WHEN (SB-C:SC-IS SB-VM::Y SB-VM::FP-COMPLEX-DOUBLE-IMMEDIATE) (SETF #))
;       (SB-ASSEM:INST SB-VM::CMPPD :LE SB-VM::TMP SB-VM::Y)
;       (SB-ASSEM:INST SB-VM::MOVMSKPD SB-VM::R SB-VM::TMP))))
; 
; note: Return type not fixed values, so can't use known return convention:
;   *

; compiling (DECLAIM (INLINE COMPLEX-DOUBLE-FLOAT/SSE-*))
; compiling (DECLAIM (INLINE CMPLE-MOVMSKPD))
; compiling (DECLAIM (INLINE VOPS::CALC-ROW ...))
; compiling (DECLAIM (INLINE VOPS::COMPLEX-DOUBLE-FLOAT/SSE-*))
; compiling (DECLAIM (INLINE VOPS::CMPLE-MOVMSKPD))
; compiling (DEFUN VOPS::COMPLEX-DOUBLE-FLOAT/SSE-* ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN VOPS::COMPLEX-DOUBLE-FLOAT/SSE-*
;     (DEFUN VOPS::COMPLEX-DOUBLE-FLOAT/SSE-* (SB-VM::NUMBERA SB-VM::NUMBERB)
;       (DECLARE (TYPE (COMPLEX DOUBLE-FLOAT) SB-VM::NUMBERA SB-VM::NUMBERB)
;                (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (DEBUG 0)))
;       (SB-VM::COMPLEX-DOUBLE-FLOAT/SSE-* SB-VM::NUMBERA SB-VM::NUMBERB))
; --> PROGN 
; ==>
;   (SB-IMPL::%DEFUN 'VOPS::COMPLEX-DOUBLE-FLOAT/SSE-*
;                    (SB-INT:NAMED-LAMBDA VOPS::COMPLEX-DOUBLE-FLOAT/SSE-*
;                        (SB-VM::NUMBERA SB-VM::NUMBERB)
;                      (DECLARE
;                       (TYPE (COMPLEX DOUBLE-FLOAT) SB-VM::NUMBERA
;                        SB-VM::NUMBERB)
;                       (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (DEBUG 0)))
;                      (BLOCK VOPS::COMPLEX-DOUBLE-FLOAT/SSE-*
;                        (SB-VM::COMPLEX-DOUBLE-FLOAT/SSE-* SB-VM::NUMBERA
;                         SB-VM::NUMBERB)))
;                    NIL
;                    '(SB-C:LAMBDA-WITH-LEXENV NIL NIL NIL
;                      (SB-VM::NUMBERA SB-VM::NUMBERB)
;                      (DECLARE
;                       (TYPE (COMPLEX DOUBLE-FLOAT) SB-VM::NUMBERA
;                        SB-VM::NUMBERB)
;                       (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (DEBUG 0)))
;                      (BLOCK VOPS::COMPLEX-DOUBLE-FLOAT/SSE-*
;                        (SB-VM::COMPLEX-DOUBLE-FLOAT/SSE-* SB-VM::NUMBERA
;                         SB-VM::NUMBERB)))
;                    (SB-C:SOURCE-LOCATION))
; 
; note: doing complex float to pointer coercion (cost 13) to "<return value>"

; compiling (DEFUN VOPS::CMPLE-MOVMSKPD ...)
; compiling (IN-PACKAGE :VOPS)
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DEFMACRO CBYTE ...)
; compiling (DEFCONSTANT +ZERO+ ...)
; compiling (DEFCONSTANT +FOUR+ ...)
; compiling (DEFCONSTANT +WORKERS+ ...)
; compiling (DEFMACRO ESCAPES? ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFMACRO ESCAPES?
;     (LOOP VOPS::FOR VOPS::I VOPS::FROM 0 VOPS::BELOW VOPS::N
;           VOPS::COLLECTING `(PROGN
;                              (LET* ((,VOPS::TEMP #))
;                                (SETF ,VOPS::ZRV #)
;                                (SETF ,VOPS::TRV #)
;                                (SETF ,VOPS::ZIV #)
;                                (SETF ,VOPS::TIV #))
;                              (LET ((,VOPS::TEMP2 #))
;                                (SETF ,VOPS::TWO-PIXELS #))
;                              (WHEN (= ,VOPS::TWO-PIXELS 0)
;                                (RETURN-FROM ,VOPS::ESCAPED))))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 1+ 
; ==>
;   (+ VOPS::I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

; compiling (DEFUN CALC-ROW ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN CALC-ROW
;     (VOPS::ESCAPES? 50 VOPS::TWO-PIXELS VOPS::CRV VOPS::CIV)
; --> LET BLOCK PROGN LET* SETF SETQ THE 
; ==>
;   (VOPS::COMPLEX-DOUBLE-FLOAT/SSE-* #:G226 #:G226)
; 
; note: *INLINE-EXPANSION-LIMIT* (200) was exceeded, probably trying to
;   inline a recursive function.

; compiling (DEFUN MAIN ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN MAIN
;     (VOPS::CALC-ROW VOPS::Y VOPS::N VOPS::BITMAP VOPS::BYTES-PER-ROW VOPS::CRVS
;      VOPS::INVERSE-H)
; --> BLOCK LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY LET LET 
; --> VOPS::ESCAPES? LET BLOCK PROGN LET* 
; ==>
;   (VOPS::COMPLEX-DOUBLE-FLOAT/SSE-* #:G281 #:G282)
; 
; note: *INLINE-EXPANSION-LIMIT* (200) was exceeded, probably trying to
;   inline a recursive function.

;     (LAMBDA ()
;       (LOOP VOPS::FOR VOPS::Y VOPS::FROM VOPS::START VOPS::TO
;             VOPS::END
;             DO (VOPS::CALC-ROW VOPS::Y VOPS::N VOPS::BITMAP VOPS::BYTES-PER-ROW
;                 VOPS::CRVS VOPS::INVERSE-H)))
; --> FUNCTION SB-C::%%ALLOCATE-CLOSURES 
; ==>
;   (SB-C::%ALLOCATE-CLOSURES
;    '(#<SB-C::CLAMBDA
;        :%SOURCE-NAME SB-C::.ANONYMOUS.
;        :%DEBUG-NAME (LAMBDA # :IN VOPS::MAIN)
;        :KIND NIL
;        :TYPE #<SB-KERNEL:FUN-TYPE #>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {1005FFD883}>))
; 
; note: doing float to pointer coercion (cost 13) from INVERSE-H, for:
;       the second argument of CLOSURE-INIT

; compiling (DECLAIM (INLINE))
; compiling (IN-PACKAGE :CL-USER)
; compiling (DEFUN MAIN ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN MAIN
;     (VOPS::MAIN)
; --> BLOCK LET* LET LET MAPCAR LET LET SB-INT:DO-ANONYMOUS BLOCK LET LOOP 
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-COLLECT-RPLACD RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-THREAD:MAKE-THREAD LET LAMBDA 
; --> FUNCTION LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY VOPS::CALC-ROW BLOCK 
; --> LET LOOP BLOCK LET SB-LOOP::LOOP-BODY TAGBODY LET LET VOPS::ESCAPES? LET 
; --> BLOCK PROGN LET* SETF SETQ THE 
; ==>
;   (VOPS::COMPLEX-DOUBLE-FLOAT/SSE-* #:G384 #:G384)
; 
; note: *INLINE-EXPANSION-LIMIT* (200) was exceeded, probably trying to
;   inline a recursive function.

; --> BLOCK LET* LET LET MAPCAR LET LET SB-INT:DO-ANONYMOUS BLOCK LET LOOP 
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-COLLECT-RPLACD RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-THREAD:MAKE-THREAD LET LAMBDA 
; --> FUNCTION SB-C::%%ALLOCATE-CLOSURES 
; ==>
;   (SB-C::%ALLOCATE-CLOSURES
;    '(#<SB-C::CLAMBDA
;        :%SOURCE-NAME SB-C::.ANONYMOUS.
;        :%DEBUG-NAME (LAMBDA # :IN VOPS::MAIN)
;        :KIND NIL
;        :TYPE #<SB-KERNEL:FUN-TYPE #>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {100342A533}>))
; 
; note: doing float to pointer coercion (cost 13) from VOPS::INVERSE-H, for:
;       the second argument of CLOSURE-INIT
; 
; compilation unit finished
;   printed 10 notes


; /home/dunham/benchmarksgame_quadcore/mandelbrot/tmp/mandelbrot.fasl written
; compilation finished in 0:00:00.565
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 5792 bytes from the read-only space at 0x0x20000000
writing 3120 bytes from the static space at 0x0x20100000
writing 45875200 bytes from the dynamic space at 0x0x1000000000
done]
### START mandelbrot.sbcl_run
(main) (quit)
### END mandelbrot.sbcl_run

0.96s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl  --noinform --core sbcl.core --userinit /dev/null --load mandelbrot.sbcl_run 16000

(BINARY) PROGRAM OUTPUT NOT SHOWN
