
Sat, 31 May 2014 16:39:20 GMT

MAKE:
cp: ‘mandelbrot.sbcl’ and ‘./mandelbrot.sbcl’ are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "mandelbrot.sbcl_compile")'
### START mandelbrot.sbcl_compile
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "mandelbrot.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END mandelbrot.sbcl_compile

; compiling file "/home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl" (written 24 JAN 2013 02:01:15 PM):
; compiling (SETF *EFFICIENCY-NOTE-COST-THRESHOLD* ...)
; compiling (SETF *EFFICIENCY-NOTE-LIMIT* ...)
; compiling (SETF *INLINE-EXPANSION-LIMIT* ...)
; compiling (SB-INT:SET-FLOATING-POINT-MODES :TRAPS ...)
; compiling (DEFPACKAGE :VOPS ...)
; compiling (IN-PACKAGE :SB-VM)
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DECLAIM (INLINE VOPS::CALC-ROW ...))
; compiling (IN-PACKAGE :VOPS)
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DEFMACRO CBYTE ...)
; compiling (DEFCONSTANT +ZERO+ ...)
; compiling (DEFCONSTANT +FOUR+ ...)
; compiling (DEFCONSTANT +WORKERS+ ...)
; compiling (DEFMACRO ESCAPES? ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFMACRO ESCAPES?
;     (LOOP VOPS::FOR VOPS::I VOPS::FROM 0 VOPS::BELOW VOPS::N
;           VOPS::COLLECTING `(PROGN
;                              (LET ((,VOPS::TEMP #))
;                                (SETF ,VOPS::ZRV1 #)
;                                (SETF ,VOPS::TRV1 #)
;                                (SETF ,VOPS::ZIV1 #)
;                                (SETF ,VOPS::TIV1 #))
;                              (LET ((,VOPS::TEMP2 #))
;                                (WHEN (> ,VOPS::TEMP2 4.0d0)
;                                  (SETF #)
;                                  (RETURN-FROM ,VOPS::ESCAPED)))))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

;     (LOOP VOPS::FOR VOPS::I VOPS::FROM 0 VOPS::BELOW VOPS::N
;           VOPS::COLLECTING `(PROGN
;                              (LET ((,VOPS::TEMP #))
;                                (SETF ,VOPS::ZRV2 #)
;                                (SETF ,VOPS::TRV2 #)
;                                (SETF ,VOPS::ZIV2 #)
;                                (SETF ,VOPS::TIV2 #))
;                              (LET ((,VOPS::TEMP2 #))
;                                (WHEN (> ,VOPS::TEMP2 4.0d0)
;                                  (SETF #)
;                                  (RETURN-FROM ,VOPS::ESCAPED)))))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET IF OR THE = IF 
; ==>
;   (= SB-C::X SB-C::Y)
; 
; note: unable to open code because: The operands might not be the same type.

;     (LOOP VOPS::FOR VOPS::I VOPS::FROM 0 VOPS::BELOW VOPS::N
;           VOPS::COLLECTING `(PROGN
;                              (LET ((,VOPS::TEMP #))
;                                (SETF ,VOPS::ZRV1 #)
;                                (SETF ,VOPS::TRV1 #)
;                                (SETF ,VOPS::ZIV1 #)
;                                (SETF ,VOPS::TIV1 #))
;                              (LET ((,VOPS::TEMP2 #))
;                                (WHEN (> ,VOPS::TEMP2 4.0d0)
;                                  (SETF #)
;                                  (RETURN-FROM ,VOPS::ESCAPED)))))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 1+ 
; ==>
;   (+ VOPS::I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

;     (LOOP VOPS::FOR VOPS::I VOPS::FROM 0 VOPS::BELOW VOPS::N
;           VOPS::COLLECTING `(PROGN
;                              (LET ((,VOPS::TEMP #))
;                                (SETF ,VOPS::ZRV2 #)
;                                (SETF ,VOPS::TRV2 #)
;                                (SETF ,VOPS::ZIV2 #)
;                                (SETF ,VOPS::TIV2 #))
;                              (LET ((,VOPS::TEMP2 #))
;                                (WHEN (> ,VOPS::TEMP2 4.0d0)
;                                  (SETF #)
;                                  (RETURN-FROM ,VOPS::ESCAPED)))))
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY WHEN IF >= OR LET > IF 
; ==>
;   (> SB-C::X SB-C::Y)
; 
; note: forced to do GENERIC-> (cost 10)
;       unable to do inline fixnum comparison (cost 4) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The second argument is a REAL, not a FIXNUM.

; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-REALLY-DESETQ SETQ THE 1+ 
; ==>
;   (+ VOPS::I 1)
; 
; note: forced to do GENERIC-+ (cost 10)
;       unable to do inline fixnum arithmetic (cost 1) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       unable to do inline fixnum arithmetic (cost 2) because:
;       The first argument is a UNSIGNED-BYTE, not a FIXNUM.
;       The result is a (VALUES (INTEGER 1) &OPTIONAL), not a (VALUES FIXNUM
;                                                                     &REST T).
;       etc.

; compiling (DEFUN CALC-ROW ...)
; compiling (DEFUN MAIN ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN MAIN
;     (LAMBDA ()
;       (LOOP VOPS::FOR VOPS::Y VOPS::FROM VOPS::START VOPS::TO
;             VOPS::END
;             DO (VOPS::CALC-ROW VOPS::Y VOPS::N VOPS::BITMAP VOPS::BYTES-PER-ROW
;                 VOPS::CRVS VOPS::INVERSE-H)))
; --> FUNCTION SB-C::%%ALLOCATE-CLOSURES 
; ==>
;   (SB-C::%ALLOCATE-CLOSURES
;    '(#<SB-C::CLAMBDA
;        :%SOURCE-NAME SB-C::.ANONYMOUS.
;        :%DEBUG-NAME (LAMBDA # :IN VOPS::MAIN)
;        :KIND NIL
;        :TYPE #<SB-KERNEL:FUN-TYPE #>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {C72C8F9}>))
; 
; note: doing float to pointer coercion (cost 13) from INVERSE-H, for:
;       the second argument of CLOSURE-INIT

; compiling (DECLAIM (INLINE))
; compiling (IN-PACKAGE :CL-USER)
; compiling (DEFUN MAIN ...)
; file: /home/dunham/benchmarksgame/bench/mandelbrot/mandelbrot.sbcl
; in: DEFUN MAIN
;     (VOPS::MAIN)
; --> BLOCK LET* LET LET MAPCAR LET LET SB-INT:DO-ANONYMOUS BLOCK LET LOOP 
; --> BLOCK LET SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD LET* SB-LOOP::LOOP-BODY 
; --> TAGBODY SB-LOOP::LOOP-COLLECT-RPLACD RPLACD LET PROGN SETF 
; --> SB-KERNEL:%RPLACD SETQ THE LIST CONS SB-THREAD:MAKE-THREAD LET LAMBDA 
; --> FUNCTION SB-C::%%ALLOCATE-CLOSURES 
; ==>
;   (SB-C::%ALLOCATE-CLOSURES
;    '(#<SB-C::CLAMBDA
;        :%SOURCE-NAME SB-C::.ANONYMOUS.
;        :%DEBUG-NAME (LAMBDA # :IN VOPS::MAIN)
;        :KIND NIL
;        :TYPE #<SB-KERNEL:FUN-TYPE #>
;        :WHERE-FROM :DEFINED
;        :VARS NIL {C93D851}>))
; 
; note: doing float to pointer coercion (cost 13) from VOPS::INVERSE-H, for:
;       the second argument of CLOSURE-INIT
; 
; compilation unit finished
;   printed 8 notes


; /home/dunham/benchmarksgame_quadcore/mandelbrot/tmp/mandelbrot.fasl written
; compilation finished in 0:00:00.882
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 3528 bytes from the read-only space at 0x0x1000000
writing 2240 bytes from the static space at 0x0x1100000
writing 30285824 bytes from the dynamic space at 0x0x9000000
done]
### START mandelbrot.sbcl_run
(main) (quit)
### END mandelbrot.sbcl_run

1.57s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl  --noinform --core sbcl.core --userinit /dev/null --load mandelbrot.sbcl_run 16000

(BINARY) PROGRAM OUTPUT NOT SHOWN
