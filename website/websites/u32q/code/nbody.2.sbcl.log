
Sun, 01 Jun 2014 04:10:06 GMT

MAKE:
cp: ‘nbody.sbcl-2.sbcl’ and ‘./nbody.sbcl-2.sbcl’ are the same file
SBCL built with: /usr/local/bin/sbcl --userinit /dev/null --batch --eval '(load "nbody.sbcl-2.sbcl_compile")'
### START nbody.sbcl-2.sbcl_compile
(handler-bind ((sb-ext:defconstant-uneql      (lambda (c) (abort c))))      (load (compile-file "nbody.sbcl-2.sbcl" ))) (save-lisp-and-die "sbcl.core" :purify t)
### END nbody.sbcl-2.sbcl_compile

; compiling file "/home/dunham/benchmarksgame/bench/nbody/nbody.sbcl-2.sbcl" (written 24 JAN 2013 02:01:15 PM):
; compiling (DECLAIM (OPTIMIZE # ...))
; compiling (DEFCONSTANT +DAYS-PER-YEAR+ ...)
; compiling (DEFCONSTANT +SOLAR-MASS+ ...)
; compiling (DEFSTRUCT (BODY # ...) ...)
; file: /home/dunham/benchmarksgame/bench/nbody/nbody.sbcl-2.sbcl
; in: DEFSTRUCT BODY
;     (DEFSTRUCT
;         (BODY (:TYPE (VECTOR DOUBLE-FLOAT)) (:CONC-NAME NIL)
;          (:CONSTRUCTOR MAKE-BODY (X Y Z VX VY VZ MASS)))
;       X
;       Y
;       Z
;       VX
;       VY
;       VZ
;       MASS)
; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK THE ELT AREF 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G16)
;       (DECLARE (IGNORE #:G16))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK SETF SB-KERNEL:%SETELT SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G27)
;       (DECLARE (IGNORE #:G27))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK THE ELT AREF 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G32)
;       (DECLARE (IGNORE #:G32))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK SETF SB-KERNEL:%SETELT SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G43)
;       (DECLARE (IGNORE #:G43))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK THE ELT AREF 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G48)
;       (DECLARE (IGNORE #:G48))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK SETF SB-KERNEL:%SETELT SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G59)
;       (DECLARE (IGNORE #:G59))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK THE ELT AREF 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G64)
;       (DECLARE (IGNORE #:G64))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK SETF SB-KERNEL:%SETELT SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G75)
;       (DECLARE (IGNORE #:G75))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK THE ELT AREF 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G80)
;       (DECLARE (IGNORE #:G80))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK SETF SB-KERNEL:%SETELT SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G91)
;       (DECLARE (IGNORE #:G91))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK THE ELT AREF 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G96)
;       (DECLARE (IGNORE #:G96))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK SETF SB-KERNEL:%SETELT SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G107)
;       (DECLARE (IGNORE #:G107))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK THE ELT AREF 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-REF MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G112)
;       (DECLARE (IGNORE #:G112))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY))
;       (SB-KERNEL:DATA-VECTOR-REF ARRAY SB-INT:INDEX))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; --> PROGN DEFUN PROGN SB-IMPL::%DEFUN BLOCK SETF SB-KERNEL:%SETELT SETF LET* 
; --> MULTIPLE-VALUE-BIND LET FUNCALL SB-C::%FUNCALL (SETF AREF) 
; --> SB-KERNEL:HAIRY-DATA-VECTOR-SET MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (ARRAY) (SB-INT:INDEX) &REST #:G123)
;       (DECLARE (IGNORE #:G123))
;       (DECLARE (TYPE (SIMPLE-ARRAY DOUBLE-FLOAT 1) ARRAY)
;                (TYPE DOUBLE-FLOAT SB-C::NEW-VALUE))
;       (SB-KERNEL:DATA-VECTOR-SET ARRAY SB-INT:INDEX SB-C::NEW-VALUE))
; 
; note: doing float to pointer coercion (cost 13) to "<return value>"

; compiling (DEFTYPE BODY ...)
; compiling (DEFPARAMETER *JUPITER* ...)
; compiling (DEFPARAMETER *SATURN* ...)
; compiling (DEFPARAMETER *URANUS* ...)
; compiling (DEFPARAMETER *NEPTUNE* ...)
; compiling (DEFPARAMETER *SUN* ...)
; compiling (DECLAIM (INLINE APPLYFORCES))
; compiling (DEFUN APPLYFORCES ...)
; compiling (DEFUN ADVANCE ...)
; compiling (DEFUN ENERGY ...)
; file: /home/dunham/benchmarksgame/bench/nbody/nbody.sbcl-2.sbcl
; in: DEFUN ENERGY
;     (DEFUN ENERGY (SYSTEM)
;       (LET ((E 0.0d0))
;         (DECLARE (DOUBLE-FLOAT E))
;         (LOOP FOR (A . REST) ON SYSTEM
;               DO (INCF E (* 0.5d0 # #)) (DOLIST (B REST)
;                                           (LET* #
;                                             #)))
;         E))
; --> PROGN 
; ==>
;   (SB-IMPL::%DEFUN 'ENERGY
;                    (SB-INT:NAMED-LAMBDA ENERGY
;                        (SYSTEM)
;                      (BLOCK ENERGY
;                        (LET (#)
;                          (DECLARE #)
;                          (LOOP FOR # ON SYSTEM
;                                DO # #)
;                          E)))
;                    NIL 'NIL (SB-C:SOURCE-LOCATION))
; 
; note: doing float to pointer coercion (cost 13) from E to "<return value>"

; compiling (DEFUN OFFSET-MOMENTUM ...)
; file: /home/dunham/benchmarksgame/bench/nbody/nbody.sbcl-2.sbcl
; in: DEFUN OFFSET-MOMENTUM
;     (/ (- PX) +SOLAR-MASS+)
; 
; note: unable to
;   convert to multiplication by reciprocal
; because:
;   39.47841760435743d0 does not have an exact reciprocal

;     (/ (- PY) +SOLAR-MASS+)
; 
; note: unable to
;   convert to multiplication by reciprocal
; because:
;   39.47841760435743d0 does not have an exact reciprocal

;     (/ (- PZ) +SOLAR-MASS+)
; 
; note: unable to
;   convert to multiplication by reciprocal
; because:
;   39.47841760435743d0 does not have an exact reciprocal

; compiling (DEFUN NBODY ...)
; compiling (DEFUN MAIN ...); 
; compilation unit finished
;   printed 18 notes


; /home/dunham/benchmarksgame_quadcore/nbody/tmp/nbody.sbcl-2.fasl written
; compilation finished in 0:00:00.433
[undoing binding stack and other enclosing state... done]
[saving current Lisp image into sbcl.core:
writing 3528 bytes from the read-only space at 0x0x1000000
writing 2240 bytes from the static space at 0x0x1100000
writing 30224384 bytes from the dynamic space at 0x0x9000000
done]
### START nbody.sbcl-2.sbcl_run
(main) (quit)
### END nbody.sbcl-2.sbcl_run

3.58s to complete and log all make actions

COMMAND LINE:
/usr/local/bin/sbcl  --noinform --core sbcl.core --userinit /dev/null --load nbody.sbcl-2.sbcl_run 50000000

PROGRAM OUTPUT:
-0.169075164
-0.169059907
